/**
 * Generated by karavan build tools - do NOT edit this file!
 */
import { CamelElement } from "./IntegrationDefinition";
export declare class TraitPropertyMeta {
    name: string;
    type: string;
    description: string;
    constructor(name: string, type: string, description: string);
}
export declare class TraitMeta {
    name: string;
    platform: boolean;
    profiles: string;
    description: string;
    properties: TraitPropertyMeta[];
    constructor(name: string, platform: boolean, profiles: string, description: string, properties: TraitPropertyMeta[]);
}
export declare class Trait extends CamelElement {
    affinity?: AffinityTrait;
    builder?: BuilderTrait;
    camel?: CamelTrait;
    container?: ContainerTrait;
    cron?: CronTrait;
    dependencies?: DependenciesTrait;
    deployer?: DeployerTrait;
    deployment?: DeploymentTrait;
    environment?: EnvironmentTrait;
    errorHandler?: ErrorHandlerTrait;
    gc?: GcTrait;
    health?: HealthTrait;
    ingress?: IngressTrait;
    istio?: IstioTrait;
    jolokia?: JolokiaTrait;
    jvm?: JvmTrait;
    kamelets?: KameletsTrait;
    keda?: KedaTrait;
    knativeService?: KnativeServiceTrait;
    knative?: KnativeTrait;
    logging?: LoggingTrait;
    master?: MasterTrait;
    mount?: MountTrait;
    openapi?: OpenapiTrait;
    owner?: OwnerTrait;
    pdb?: PdbTrait;
    platform?: PlatformTrait;
    pod?: PodTrait;
    prometheus?: PrometheusTrait;
    pullSecret?: PullSecretTrait;
    quarkus?: QuarkusTrait;
    route?: RouteTrait;
    serviceBinding?: ServiceBindingTrait;
    service?: ServiceTrait;
    threeScale?: ThreeScaleTrait;
    toleration?: TolerationTrait;
    tracing?: TracingTrait;
    constructor(init?: Partial<Trait>);
}
export declare class AffinityTrait extends CamelElement {
    enabled?: boolean;
    podAffinity?: boolean;
    podAntiAffinity?: boolean;
    nodeAffinityLabels?: string[];
    podAffinityLabels?: string[];
    podAntiAffinityLabels?: string[];
    constructor(init?: Partial<AffinityTrait>);
}
export declare class BuilderTrait extends CamelElement {
    enabled?: boolean;
    verbose?: boolean;
    properties?: string[];
    constructor(init?: Partial<BuilderTrait>);
}
export declare class CamelTrait extends CamelElement {
    enabled?: boolean;
    runtimeVersion?: string;
    properties?: string[];
    constructor(init?: Partial<CamelTrait>);
}
export declare class ContainerTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    requestCpu?: string;
    requestMemory?: string;
    limitCpu?: string;
    limitMemory?: string;
    expose?: boolean;
    port?: string;
    portName?: string;
    servicePort?: string;
    servicePortName?: string;
    name?: string;
    image?: string;
    imagePullPolicy?: string;
    probesEnabled?: boolean;
    livenessScheme?: string;
    livenessInitialDelay?: number;
    livenessTimeout?: number;
    livenessPeriod?: number;
    livenessSuccessThreshold?: number;
    livenessFailureThreshold?: number;
    readinessScheme?: string;
    readinessInitialDelay?: number;
    readinessTimeout?: number;
    readinessPeriod?: number;
    readinessSuccessThreshold?: number;
    readinessFailureThreshold?: number;
    constructor(init?: Partial<ContainerTrait>);
}
export declare class CronTrait extends CamelElement {
    enabled?: boolean;
    schedule?: string;
    components?: string;
    fallback?: boolean;
    concurrencyPolicy?: string;
    auto?: boolean;
    startingDeadlineSeconds?: number;
    activeDeadlineSeconds?: number;
    backoffLimit?: number;
    constructor(init?: Partial<CronTrait>);
}
export declare class DependenciesTrait extends CamelElement {
    constructor(init?: Partial<DependenciesTrait>);
}
export declare class DeployerTrait extends CamelElement {
    enabled?: boolean;
    kind?: string;
    constructor(init?: Partial<DeployerTrait>);
}
export declare class DeploymentTrait extends CamelElement {
    enabled?: boolean;
    progressDeadlineSeconds?: number;
    constructor(init?: Partial<DeploymentTrait>);
}
export declare class EnvironmentTrait extends CamelElement {
    enabled?: boolean;
    containerMeta?: boolean;
    httpProxy?: boolean;
    vars?: string[];
    constructor(init?: Partial<EnvironmentTrait>);
}
export declare class ErrorHandlerTrait extends CamelElement {
    enabled?: boolean;
    ref?: string;
    constructor(init?: Partial<ErrorHandlerTrait>);
}
export declare class GcTrait extends CamelElement {
    enabled?: boolean;
    discoveryCache?: string;
    constructor(init?: Partial<GcTrait>);
}
export declare class HealthTrait extends CamelElement {
    enabled?: boolean;
    livenessProbeEnabled?: boolean;
    livenessScheme?: string;
    livenessInitialDelay?: number;
    livenessTimeout?: number;
    livenessPeriod?: number;
    livenessSuccessThreshold?: number;
    livenessFailureThreshold?: number;
    readinessProbeEnabled?: boolean;
    readinessScheme?: string;
    readinessInitialDelay?: number;
    readinessTimeout?: number;
    readinessPeriod?: number;
    readinessSuccessThreshold?: number;
    readinessFailureThreshold?: number;
    constructor(init?: Partial<HealthTrait>);
}
export declare class IngressTrait extends CamelElement {
    enabled?: boolean;
    host?: string;
    auto?: boolean;
    constructor(init?: Partial<IngressTrait>);
}
export declare class IstioTrait extends CamelElement {
    enabled?: boolean;
    allow?: string;
    inject?: boolean;
    constructor(init?: Partial<IstioTrait>);
}
export declare class JolokiaTrait extends CamelElement {
    enabled?: boolean;
    caCert?: string;
    clientPrincipal?: string[];
    discoveryEnabled?: boolean;
    extendedClientCheck?: boolean;
    host?: string;
    password?: string;
    port?: string;
    protocol?: string;
    user?: string;
    useSslClientAuthentication?: boolean;
    options?: string[];
    constructor(init?: Partial<JolokiaTrait>);
}
export declare class JvmTrait extends CamelElement {
    enabled?: boolean;
    debug?: boolean;
    debugSuspend?: boolean;
    printCommand?: boolean;
    debugAddress?: string;
    options?: string[];
    classpath?: string;
    constructor(init?: Partial<JvmTrait>);
}
export declare class KameletsTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    list?: string;
    constructor(init?: Partial<KameletsTrait>);
}
export declare class KedaTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    hackControllerReplicas?: boolean;
    pollingInterval?: number;
    cooldownPeriod?: number;
    idleReplicaCount?: number;
    minReplicaCount?: number;
    maxReplicaCount?: number;
    triggers?: string;
    constructor(init?: Partial<KedaTrait>);
}
export declare class KnativeServiceTrait extends CamelElement {
    enabled?: boolean;
    autoscalingClass?: string;
    autoscalingMetric?: string;
    autoscalingTarget?: string;
    minScale?: string;
    maxScale?: string;
    rolloutDuration?: string;
    auto?: boolean;
    constructor(init?: Partial<KnativeServiceTrait>);
}
export declare class KnativeTrait extends CamelElement {
    enabled?: boolean;
    configuration?: string;
    channelSources?: string[];
    channelSinks?: string[];
    endpointSources?: string[];
    endpointSinks?: string[];
    eventSources?: string[];
    eventSinks?: string[];
    filterSourceChannels?: boolean;
    sinkBinding?: boolean;
    auto?: boolean;
    constructor(init?: Partial<KnativeTrait>);
}
export declare class LoggingTrait extends CamelElement {
    enabled?: boolean;
    color?: boolean;
    format?: string;
    level?: string;
    json?: boolean;
    jsonPrettyPrint?: boolean;
    constructor(init?: Partial<LoggingTrait>);
}
export declare class MasterTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    includeDelegateDependencies?: boolean;
    resourceName?: string;
    resourceType?: string;
    labelKey?: string;
    labelValue?: string;
    constructor(init?: Partial<MasterTrait>);
}
export declare class MountTrait extends CamelElement {
    enabled?: boolean;
    configs?: string[];
    resources?: string[];
    volumes?: string[];
    constructor(init?: Partial<MountTrait>);
}
export declare class OpenapiTrait extends CamelElement {
    enabled?: boolean;
    configmaps?: string[];
    constructor(init?: Partial<OpenapiTrait>);
}
export declare class OwnerTrait extends CamelElement {
    enabled?: boolean;
    targetAnnotations?: string[];
    targetLabels?: string[];
    constructor(init?: Partial<OwnerTrait>);
}
export declare class PdbTrait extends CamelElement {
    enabled?: boolean;
    minAvailable?: string;
    maxUnavailable?: string;
    constructor(init?: Partial<PdbTrait>);
}
export declare class PlatformTrait extends CamelElement {
    enabled?: boolean;
    createDefault?: boolean;
    global?: boolean;
    auto?: boolean;
    constructor(init?: Partial<PlatformTrait>);
}
export declare class PodTrait extends CamelElement {
    constructor(init?: Partial<PodTrait>);
}
export declare class PrometheusTrait extends CamelElement {
    enabled?: boolean;
    podMonitor?: boolean;
    podMonitorLabels?: string[];
    constructor(init?: Partial<PrometheusTrait>);
}
export declare class PullSecretTrait extends CamelElement {
    enabled?: boolean;
    secretName?: string;
    imagePullerDelegation?: boolean;
    auto?: boolean;
    constructor(init?: Partial<PullSecretTrait>);
}
export declare class QuarkusTrait extends CamelElement {
    enabled?: boolean;
    packageType?: string;
    constructor(init?: Partial<QuarkusTrait>);
}
export declare class RouteTrait extends CamelElement {
    enabled?: boolean;
    host?: string;
    tlsTermination?: string;
    tlsCertificate?: string;
    tlsCertificateSecret?: string;
    tlsKey?: string;
    tlsKeySecret?: string;
    tlsCaCertificate?: string;
    tlsCaCertificateSecret?: string;
    tlsDestinationCaCertificate?: string;
    tlsDestinationCaCertificateSecret?: string;
    tlsInsecureEdgeTerminationPolicy?: string;
    constructor(init?: Partial<RouteTrait>);
}
export declare class ServiceBindingTrait extends CamelElement {
    enabled?: boolean;
    services?: string[];
    constructor(init?: Partial<ServiceBindingTrait>);
}
export declare class ServiceTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    nodePort?: boolean;
    constructor(init?: Partial<ServiceTrait>);
}
export declare class ThreeScaleTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    scheme?: string;
    path?: string;
    port?: string;
    descriptionPath?: string;
    constructor(init?: Partial<ThreeScaleTrait>);
}
export declare class TolerationTrait extends CamelElement {
    enabled?: boolean;
    taints?: string[];
    constructor(init?: Partial<TolerationTrait>);
}
export declare class TracingTrait extends CamelElement {
    enabled?: boolean;
    auto?: boolean;
    serviceName?: string;
    endpoint?: string;
    samplerType?: string;
    samplerParam?: string;
    constructor(init?: Partial<TracingTrait>);
}
export declare class TraitApi {
    static traitsFromYaml(yaml: any): Trait;
    static cloneTrait(t: Trait): Trait;
}
export declare const CamelTraitMetadata: TraitMeta[];
