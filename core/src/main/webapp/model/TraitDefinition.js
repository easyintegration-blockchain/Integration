"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CamelTraitMetadata = exports.TraitApi = exports.TracingTrait = exports.TolerationTrait = exports.ThreeScaleTrait = exports.ServiceTrait = exports.ServiceBindingTrait = exports.RouteTrait = exports.QuarkusTrait = exports.PullSecretTrait = exports.PrometheusTrait = exports.PodTrait = exports.PlatformTrait = exports.PdbTrait = exports.OwnerTrait = exports.OpenapiTrait = exports.MountTrait = exports.MasterTrait = exports.LoggingTrait = exports.KnativeTrait = exports.KnativeServiceTrait = exports.KedaTrait = exports.KameletsTrait = exports.JvmTrait = exports.JolokiaTrait = exports.IstioTrait = exports.IngressTrait = exports.HealthTrait = exports.GcTrait = exports.ErrorHandlerTrait = exports.EnvironmentTrait = exports.DeploymentTrait = exports.DeployerTrait = exports.DependenciesTrait = exports.CronTrait = exports.ContainerTrait = exports.CamelTrait = exports.BuilderTrait = exports.AffinityTrait = exports.Trait = exports.TraitMeta = exports.TraitPropertyMeta = void 0;
/**
 * Generated by karavan build tools - do NOT edit this file!
 */
var IntegrationDefinition_1 = require("./IntegrationDefinition");
var TraitPropertyMeta = /** @class */ (function () {
    function TraitPropertyMeta(name, type, description) {
        this.name = name;
        this.type = type;
        this.description = description;
    }
    return TraitPropertyMeta;
}());
exports.TraitPropertyMeta = TraitPropertyMeta;
var TraitMeta = /** @class */ (function () {
    function TraitMeta(name, platform, profiles, description, properties) {
        this.name = name;
        this.platform = platform;
        this.profiles = profiles;
        this.description = description;
        this.properties = properties;
    }
    return TraitMeta;
}());
exports.TraitMeta = TraitMeta;
var Trait = /** @class */ (function (_super) {
    __extends(Trait, _super);
    function Trait(init) {
        var _this = _super.call(this, 'Trait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return Trait;
}(IntegrationDefinition_1.CamelElement));
exports.Trait = Trait;
var AffinityTrait = /** @class */ (function (_super) {
    __extends(AffinityTrait, _super);
    function AffinityTrait(init) {
        var _this = _super.call(this, 'AffinityTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return AffinityTrait;
}(IntegrationDefinition_1.CamelElement));
exports.AffinityTrait = AffinityTrait;
var BuilderTrait = /** @class */ (function (_super) {
    __extends(BuilderTrait, _super);
    function BuilderTrait(init) {
        var _this = _super.call(this, 'BuilderTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return BuilderTrait;
}(IntegrationDefinition_1.CamelElement));
exports.BuilderTrait = BuilderTrait;
var CamelTrait = /** @class */ (function (_super) {
    __extends(CamelTrait, _super);
    function CamelTrait(init) {
        var _this = _super.call(this, 'CamelTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return CamelTrait;
}(IntegrationDefinition_1.CamelElement));
exports.CamelTrait = CamelTrait;
var ContainerTrait = /** @class */ (function (_super) {
    __extends(ContainerTrait, _super);
    function ContainerTrait(init) {
        var _this = _super.call(this, 'ContainerTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return ContainerTrait;
}(IntegrationDefinition_1.CamelElement));
exports.ContainerTrait = ContainerTrait;
var CronTrait = /** @class */ (function (_super) {
    __extends(CronTrait, _super);
    function CronTrait(init) {
        var _this = _super.call(this, 'CronTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return CronTrait;
}(IntegrationDefinition_1.CamelElement));
exports.CronTrait = CronTrait;
var DependenciesTrait = /** @class */ (function (_super) {
    __extends(DependenciesTrait, _super);
    function DependenciesTrait(init) {
        var _this = _super.call(this, 'DependenciesTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return DependenciesTrait;
}(IntegrationDefinition_1.CamelElement));
exports.DependenciesTrait = DependenciesTrait;
var DeployerTrait = /** @class */ (function (_super) {
    __extends(DeployerTrait, _super);
    function DeployerTrait(init) {
        var _this = _super.call(this, 'DeployerTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return DeployerTrait;
}(IntegrationDefinition_1.CamelElement));
exports.DeployerTrait = DeployerTrait;
var DeploymentTrait = /** @class */ (function (_super) {
    __extends(DeploymentTrait, _super);
    function DeploymentTrait(init) {
        var _this = _super.call(this, 'DeploymentTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return DeploymentTrait;
}(IntegrationDefinition_1.CamelElement));
exports.DeploymentTrait = DeploymentTrait;
var EnvironmentTrait = /** @class */ (function (_super) {
    __extends(EnvironmentTrait, _super);
    function EnvironmentTrait(init) {
        var _this = _super.call(this, 'EnvironmentTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return EnvironmentTrait;
}(IntegrationDefinition_1.CamelElement));
exports.EnvironmentTrait = EnvironmentTrait;
var ErrorHandlerTrait = /** @class */ (function (_super) {
    __extends(ErrorHandlerTrait, _super);
    function ErrorHandlerTrait(init) {
        var _this = _super.call(this, 'ErrorHandlerTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return ErrorHandlerTrait;
}(IntegrationDefinition_1.CamelElement));
exports.ErrorHandlerTrait = ErrorHandlerTrait;
var GcTrait = /** @class */ (function (_super) {
    __extends(GcTrait, _super);
    function GcTrait(init) {
        var _this = _super.call(this, 'GcTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return GcTrait;
}(IntegrationDefinition_1.CamelElement));
exports.GcTrait = GcTrait;
var HealthTrait = /** @class */ (function (_super) {
    __extends(HealthTrait, _super);
    function HealthTrait(init) {
        var _this = _super.call(this, 'HealthTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return HealthTrait;
}(IntegrationDefinition_1.CamelElement));
exports.HealthTrait = HealthTrait;
var IngressTrait = /** @class */ (function (_super) {
    __extends(IngressTrait, _super);
    function IngressTrait(init) {
        var _this = _super.call(this, 'IngressTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return IngressTrait;
}(IntegrationDefinition_1.CamelElement));
exports.IngressTrait = IngressTrait;
var IstioTrait = /** @class */ (function (_super) {
    __extends(IstioTrait, _super);
    function IstioTrait(init) {
        var _this = _super.call(this, 'IstioTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return IstioTrait;
}(IntegrationDefinition_1.CamelElement));
exports.IstioTrait = IstioTrait;
var JolokiaTrait = /** @class */ (function (_super) {
    __extends(JolokiaTrait, _super);
    function JolokiaTrait(init) {
        var _this = _super.call(this, 'JolokiaTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return JolokiaTrait;
}(IntegrationDefinition_1.CamelElement));
exports.JolokiaTrait = JolokiaTrait;
var JvmTrait = /** @class */ (function (_super) {
    __extends(JvmTrait, _super);
    function JvmTrait(init) {
        var _this = _super.call(this, 'JvmTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return JvmTrait;
}(IntegrationDefinition_1.CamelElement));
exports.JvmTrait = JvmTrait;
var KameletsTrait = /** @class */ (function (_super) {
    __extends(KameletsTrait, _super);
    function KameletsTrait(init) {
        var _this = _super.call(this, 'KameletsTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return KameletsTrait;
}(IntegrationDefinition_1.CamelElement));
exports.KameletsTrait = KameletsTrait;
var KedaTrait = /** @class */ (function (_super) {
    __extends(KedaTrait, _super);
    function KedaTrait(init) {
        var _this = _super.call(this, 'KedaTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return KedaTrait;
}(IntegrationDefinition_1.CamelElement));
exports.KedaTrait = KedaTrait;
var KnativeServiceTrait = /** @class */ (function (_super) {
    __extends(KnativeServiceTrait, _super);
    function KnativeServiceTrait(init) {
        var _this = _super.call(this, 'KnativeServiceTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return KnativeServiceTrait;
}(IntegrationDefinition_1.CamelElement));
exports.KnativeServiceTrait = KnativeServiceTrait;
var KnativeTrait = /** @class */ (function (_super) {
    __extends(KnativeTrait, _super);
    function KnativeTrait(init) {
        var _this = _super.call(this, 'KnativeTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return KnativeTrait;
}(IntegrationDefinition_1.CamelElement));
exports.KnativeTrait = KnativeTrait;
var LoggingTrait = /** @class */ (function (_super) {
    __extends(LoggingTrait, _super);
    function LoggingTrait(init) {
        var _this = _super.call(this, 'LoggingTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return LoggingTrait;
}(IntegrationDefinition_1.CamelElement));
exports.LoggingTrait = LoggingTrait;
var MasterTrait = /** @class */ (function (_super) {
    __extends(MasterTrait, _super);
    function MasterTrait(init) {
        var _this = _super.call(this, 'MasterTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return MasterTrait;
}(IntegrationDefinition_1.CamelElement));
exports.MasterTrait = MasterTrait;
var MountTrait = /** @class */ (function (_super) {
    __extends(MountTrait, _super);
    function MountTrait(init) {
        var _this = _super.call(this, 'MountTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return MountTrait;
}(IntegrationDefinition_1.CamelElement));
exports.MountTrait = MountTrait;
var OpenapiTrait = /** @class */ (function (_super) {
    __extends(OpenapiTrait, _super);
    function OpenapiTrait(init) {
        var _this = _super.call(this, 'OpenapiTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return OpenapiTrait;
}(IntegrationDefinition_1.CamelElement));
exports.OpenapiTrait = OpenapiTrait;
var OwnerTrait = /** @class */ (function (_super) {
    __extends(OwnerTrait, _super);
    function OwnerTrait(init) {
        var _this = _super.call(this, 'OwnerTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return OwnerTrait;
}(IntegrationDefinition_1.CamelElement));
exports.OwnerTrait = OwnerTrait;
var PdbTrait = /** @class */ (function (_super) {
    __extends(PdbTrait, _super);
    function PdbTrait(init) {
        var _this = _super.call(this, 'PdbTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return PdbTrait;
}(IntegrationDefinition_1.CamelElement));
exports.PdbTrait = PdbTrait;
var PlatformTrait = /** @class */ (function (_super) {
    __extends(PlatformTrait, _super);
    function PlatformTrait(init) {
        var _this = _super.call(this, 'PlatformTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return PlatformTrait;
}(IntegrationDefinition_1.CamelElement));
exports.PlatformTrait = PlatformTrait;
var PodTrait = /** @class */ (function (_super) {
    __extends(PodTrait, _super);
    function PodTrait(init) {
        var _this = _super.call(this, 'PodTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return PodTrait;
}(IntegrationDefinition_1.CamelElement));
exports.PodTrait = PodTrait;
var PrometheusTrait = /** @class */ (function (_super) {
    __extends(PrometheusTrait, _super);
    function PrometheusTrait(init) {
        var _this = _super.call(this, 'PrometheusTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return PrometheusTrait;
}(IntegrationDefinition_1.CamelElement));
exports.PrometheusTrait = PrometheusTrait;
var PullSecretTrait = /** @class */ (function (_super) {
    __extends(PullSecretTrait, _super);
    function PullSecretTrait(init) {
        var _this = _super.call(this, 'PullSecretTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return PullSecretTrait;
}(IntegrationDefinition_1.CamelElement));
exports.PullSecretTrait = PullSecretTrait;
var QuarkusTrait = /** @class */ (function (_super) {
    __extends(QuarkusTrait, _super);
    function QuarkusTrait(init) {
        var _this = _super.call(this, 'QuarkusTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return QuarkusTrait;
}(IntegrationDefinition_1.CamelElement));
exports.QuarkusTrait = QuarkusTrait;
var RouteTrait = /** @class */ (function (_super) {
    __extends(RouteTrait, _super);
    function RouteTrait(init) {
        var _this = _super.call(this, 'RouteTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return RouteTrait;
}(IntegrationDefinition_1.CamelElement));
exports.RouteTrait = RouteTrait;
var ServiceBindingTrait = /** @class */ (function (_super) {
    __extends(ServiceBindingTrait, _super);
    function ServiceBindingTrait(init) {
        var _this = _super.call(this, 'ServiceBindingTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return ServiceBindingTrait;
}(IntegrationDefinition_1.CamelElement));
exports.ServiceBindingTrait = ServiceBindingTrait;
var ServiceTrait = /** @class */ (function (_super) {
    __extends(ServiceTrait, _super);
    function ServiceTrait(init) {
        var _this = _super.call(this, 'ServiceTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return ServiceTrait;
}(IntegrationDefinition_1.CamelElement));
exports.ServiceTrait = ServiceTrait;
var ThreeScaleTrait = /** @class */ (function (_super) {
    __extends(ThreeScaleTrait, _super);
    function ThreeScaleTrait(init) {
        var _this = _super.call(this, 'ThreeScaleTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return ThreeScaleTrait;
}(IntegrationDefinition_1.CamelElement));
exports.ThreeScaleTrait = ThreeScaleTrait;
var TolerationTrait = /** @class */ (function (_super) {
    __extends(TolerationTrait, _super);
    function TolerationTrait(init) {
        var _this = _super.call(this, 'TolerationTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return TolerationTrait;
}(IntegrationDefinition_1.CamelElement));
exports.TolerationTrait = TolerationTrait;
var TracingTrait = /** @class */ (function (_super) {
    __extends(TracingTrait, _super);
    function TracingTrait(init) {
        var _this = _super.call(this, 'TracingTrait') || this;
        Object.assign(_this, init);
        return _this;
    }
    return TracingTrait;
}(IntegrationDefinition_1.CamelElement));
exports.TracingTrait = TracingTrait;
var TraitApi = /** @class */ (function () {
    function TraitApi() {
    }
    TraitApi.traitsFromYaml = function (yaml) {
        var traits = new Trait();
        Object.keys(yaml).forEach(function (key) {
            if (key === 'affinity')
                traits.affinity = new AffinityTrait(yaml.affinity.configuration);
            if (key === 'builder')
                traits.builder = new BuilderTrait(yaml.builder.configuration);
            if (key === 'camel')
                traits.camel = new CamelTrait(yaml.camel.configuration);
            if (key === 'container')
                traits.container = new ContainerTrait(yaml.container.configuration);
            if (key === 'cron')
                traits.cron = new CronTrait(yaml.cron.configuration);
            if (key === 'dependencies')
                traits.dependencies = new DependenciesTrait(yaml.dependencies.configuration);
            if (key === 'deployer')
                traits.deployer = new DeployerTrait(yaml.deployer.configuration);
            if (key === 'deployment')
                traits.deployment = new DeploymentTrait(yaml.deployment.configuration);
            if (key === 'environment')
                traits.environment = new EnvironmentTrait(yaml.environment.configuration);
            if (key === 'errorHandler')
                traits.errorHandler = new ErrorHandlerTrait(yaml.errorHandler.configuration);
            if (key === 'gc')
                traits.gc = new GcTrait(yaml.gc.configuration);
            if (key === 'health')
                traits.health = new HealthTrait(yaml.health.configuration);
            if (key === 'ingress')
                traits.ingress = new IngressTrait(yaml.ingress.configuration);
            if (key === 'istio')
                traits.istio = new IstioTrait(yaml.istio.configuration);
            if (key === 'jolokia')
                traits.jolokia = new JolokiaTrait(yaml.jolokia.configuration);
            if (key === 'jvm')
                traits.jvm = new JvmTrait(yaml.jvm.configuration);
            if (key === 'kamelets')
                traits.kamelets = new KameletsTrait(yaml.kamelets.configuration);
            if (key === 'keda')
                traits.keda = new KedaTrait(yaml.keda.configuration);
            if (key === 'knativeService')
                traits.knativeService = new KnativeServiceTrait(yaml.knativeService.configuration);
            if (key === 'knative')
                traits.knative = new KnativeTrait(yaml.knative.configuration);
            if (key === 'logging')
                traits.logging = new LoggingTrait(yaml.logging.configuration);
            if (key === 'master')
                traits.master = new MasterTrait(yaml.master.configuration);
            if (key === 'mount')
                traits.mount = new MountTrait(yaml.mount.configuration);
            if (key === 'openapi')
                traits.openapi = new OpenapiTrait(yaml.openapi.configuration);
            if (key === 'owner')
                traits.owner = new OwnerTrait(yaml.owner.configuration);
            if (key === 'pdb')
                traits.pdb = new PdbTrait(yaml.pdb.configuration);
            if (key === 'platform')
                traits.platform = new PlatformTrait(yaml.platform.configuration);
            if (key === 'pod')
                traits.pod = new PodTrait(yaml.pod.configuration);
            if (key === 'prometheus')
                traits.prometheus = new PrometheusTrait(yaml.prometheus.configuration);
            if (key === 'pullSecret')
                traits.pullSecret = new PullSecretTrait(yaml.pullSecret.configuration);
            if (key === 'quarkus')
                traits.quarkus = new QuarkusTrait(yaml.quarkus.configuration);
            if (key === 'route')
                traits.route = new RouteTrait(yaml.route.configuration);
            if (key === 'serviceBinding')
                traits.serviceBinding = new ServiceBindingTrait(yaml.serviceBinding.configuration);
            if (key === 'service')
                traits.service = new ServiceTrait(yaml.service.configuration);
            if (key === '3scale')
                traits.threeScale = new ThreeScaleTrait(yaml["3scale"].configuration);
            if (key === 'toleration')
                traits.toleration = new TolerationTrait(yaml.toleration.configuration);
            if (key === 'tracing')
                traits.tracing = new TracingTrait(yaml.tracing.configuration);
        });
        return traits;
    };
    TraitApi.cloneTrait = function (t) {
        var clone = JSON.parse(JSON.stringify(t));
        var traits = new Trait();
        Object.keys(clone).forEach(function (key) {
            if (key === 'affinity')
                traits.affinity = new AffinityTrait(clone.affinity);
            if (key === 'builder')
                traits.builder = new BuilderTrait(clone.builder);
            if (key === 'camel')
                traits.camel = new CamelTrait(clone.camel);
            if (key === 'container')
                traits.container = new ContainerTrait(clone.container);
            if (key === 'cron')
                traits.cron = new CronTrait(clone.cron);
            if (key === 'dependencies')
                traits.dependencies = new DependenciesTrait(clone.dependencies);
            if (key === 'deployer')
                traits.deployer = new DeployerTrait(clone.deployer);
            if (key === 'deployment')
                traits.deployment = new DeploymentTrait(clone.deployment);
            if (key === 'environment')
                traits.environment = new EnvironmentTrait(clone.environment);
            if (key === 'errorHandler')
                traits.errorHandler = new ErrorHandlerTrait(clone.errorHandler);
            if (key === 'gc')
                traits.gc = new GcTrait(clone.gc);
            if (key === 'health')
                traits.health = new HealthTrait(clone.health);
            if (key === 'ingress')
                traits.ingress = new IngressTrait(clone.ingress);
            if (key === 'istio')
                traits.istio = new IstioTrait(clone.istio);
            if (key === 'jolokia')
                traits.jolokia = new JolokiaTrait(clone.jolokia);
            if (key === 'jvm')
                traits.jvm = new JvmTrait(clone.jvm);
            if (key === 'kamelets')
                traits.kamelets = new KameletsTrait(clone.kamelets);
            if (key === 'keda')
                traits.keda = new KedaTrait(clone.keda);
            if (key === 'knativeService')
                traits.knativeService = new KnativeServiceTrait(clone.knativeService);
            if (key === 'knative')
                traits.knative = new KnativeTrait(clone.knative);
            if (key === 'logging')
                traits.logging = new LoggingTrait(clone.logging);
            if (key === 'master')
                traits.master = new MasterTrait(clone.master);
            if (key === 'mount')
                traits.mount = new MountTrait(clone.mount);
            if (key === 'openapi')
                traits.openapi = new OpenapiTrait(clone.openapi);
            if (key === 'owner')
                traits.owner = new OwnerTrait(clone.owner);
            if (key === 'pdb')
                traits.pdb = new PdbTrait(clone.pdb);
            if (key === 'platform')
                traits.platform = new PlatformTrait(clone.platform);
            if (key === 'pod')
                traits.pod = new PodTrait(clone.pod);
            if (key === 'prometheus')
                traits.prometheus = new PrometheusTrait(clone.prometheus);
            if (key === 'pullSecret')
                traits.pullSecret = new PullSecretTrait(clone.pullSecret);
            if (key === 'quarkus')
                traits.quarkus = new QuarkusTrait(clone.quarkus);
            if (key === 'route')
                traits.route = new RouteTrait(clone.route);
            if (key === 'serviceBinding')
                traits.serviceBinding = new ServiceBindingTrait(clone.serviceBinding);
            if (key === 'service')
                traits.service = new ServiceTrait(clone.service);
            if (key === 'threeScale')
                traits.threeScale = new ThreeScaleTrait(clone.threeScale);
            if (key === 'toleration')
                traits.toleration = new TolerationTrait(clone.toleration);
            if (key === 'tracing')
                traits.tracing = new TracingTrait(clone.tracing);
        });
        return traits;
    };
    return TraitApi;
}());
exports.TraitApi = TraitApi;
exports.CamelTraitMetadata = [new TraitMeta("affinity", false, "Kubernetes, Knative, OpenShift", "Allows constraining which nodes the integration pod(s) are eligible to be scheduled on, based on labels on the node, or with inter-pod affinity and anti-affinity, based on labels on pods that are already running on the nodes. It's disabled by default.", []),
    new TraitMeta("builder", false, "Kubernetes, Knative, OpenShift", "The builder trait is internally used to determine the best strategy to build and configure IntegrationKits.", []),
    new TraitMeta("camel", false, "Kubernetes, Knative, OpenShift", "The Camel trait can be used to configure versions of Apache Camel K runtime and related libraries, it cannot be disabled.", []),
    new TraitMeta("container", false, "Kubernetes, Knative, OpenShift", "The Container trait can be used to configure properties of the container where the integration will run. It also provides configuration for Services associated to the container.", []),
    new TraitMeta("cron", false, "Kubernetes, Knative, OpenShift", "The Cron trait can be used to customize the behaviour of periodic timer/cron based integrations. While normally an integration requires a pod to be always up and running, some periodic tasks, such as batch jobs, require to be activated at specific hours of the day or with a periodic delay of minutes. For such tasks, the cron trait can materialize the integration as a Kubernetes CronJob instead of a standard deployment, in order to save resources when the integration does not need to be executed. Integrations that start from the following components are evaluated by the cron trait: `timer`, `cron`, `quartz`. The rules for using a Kubernetes CronJob are the following: - `timer`: when periods can be written as cron expressions. E.g. `timer:tick?period=60000`. - `cron`, `quartz`: when the cron expression does not contain seconds (or the \"seconds\" part is set to 0). E.g. `cron:tab?schedule=0/2${plus}*{plus}*{plus}*{plus}?` or `quartz:trigger?cron=0{plus}0/2{plus}*{plus}*{plus}*{plus}?`.", []),
    new TraitMeta("dependencies", false, "Kubernetes, Knative, OpenShift", "The Dependencies trait is internally used to automatically add runtime dependencies based on the integration that the user wants to run.", []),
    new TraitMeta("deployer", false, "Kubernetes, Knative, OpenShift", "The deployer trait is responsible for deploying the resources owned by the integration, and can be used to explicitly select the underlying controller that will manage the integration pods.", []),
    new TraitMeta("deployment", false, "Kubernetes, Knative, OpenShift", "The Deployment trait is responsible for generating the Kubernetes deployment that will make sure the integration will run in the cluster.", []),
    new TraitMeta("environment", false, "Kubernetes, Knative, OpenShift", "The environment trait is used internally to inject standard environment variables in the integration container, such as `NAMESPACE`, `POD_NAME` and others.", []),
    new TraitMeta("error-handler", false, "Kubernetes, Knative, OpenShift", "The error-handler is a platform trait used to inject Error Handler source into the integration runtime.", []),
    new TraitMeta("gc", false, "Kubernetes, Knative, OpenShift", "The GC Trait garbage-collects all resources that are no longer necessary upon integration updates.", []),
    new TraitMeta("health", false, "Kubernetes, Knative, OpenShift", "The health trait is responsible for configuring the health probes on the integration container. It's disabled by default.", []),
    new TraitMeta("ingress", false, "Kubernetes", "The Ingress trait can be used to expose the service associated with the integration to the outside world with a Kubernetes Ingress. It's enabled by default whenever a Service is added to the integration (through the `service` trait).", []),
    new TraitMeta("istio", false, "Kubernetes, Knative, OpenShift", "The Istio trait allows configuring properties related to the Istio service mesh, such as sidecar injection and outbound IP ranges.", []),
    new TraitMeta("jolokia", false, "Kubernetes, Knative, OpenShift", "The Jolokia trait activates and configures the Jolokia Java agent. See https://jolokia.org/reference/html/agents.html", []),
    new TraitMeta("jvm", false, "Kubernetes, Knative, OpenShift", "The JVM trait is used to configure the JVM that runs the integration.", []),
    new TraitMeta("kamelets", false, "Kubernetes, Knative, OpenShift", "The kamelets trait is a platform trait used to inject Kamelets into the integration runtime.", []),
    new TraitMeta("keda", false, "Kubernetes, Knative, OpenShift", "The KEDA trait can be used for automatic integration with KEDA autoscalers. The trait can be either manually configured using the `triggers` option or automatically configured via markers in the Kamelets. For information on how to use KEDA enabled Kamelets with the KEDA trait, refer to xref:ROOT:kamelets/kamelets-user.adoc#kamelet-keda-user[the KEDA section in the Kamelets user guide]. If you want to create Kamelets that contain KEDA metadata, refer to xref:ROOT:kamelets/kamelets-dev.adoc#kamelet-keda-dev[the KEDA section in the Kamelets development guide]. The KEDA trait is disabled by default.", []),
    new TraitMeta("knative-service", false, "Knative", "The Knative Service trait allows configuring options when running the Integration as a Knative service, instead of a standard Kubernetes Deployment. Running an Integration as a Knative Service enables auto-scaling (and scaling-to-zero), but those features are only relevant when the Camel route(s) use(s) an HTTP endpoint consumer.", []),
    new TraitMeta("knative", false, "Knative", "The Knative trait automatically discovers addresses of Knative resources and inject them into the running integration. The full Knative configuration is injected in the CAMEL_KNATIVE_CONFIGURATION in JSON format. The Camel Knative component will then use the full configuration to configure the routes. The trait is enabled by default when the Knative profile is active.", []),
    new TraitMeta("logging", false, "Kubernetes, Knative, OpenShift", "The Logging trait is used to configure Integration runtime logging options (such as color and format). The logging backend is provided by Quarkus, whose configuration is documented at https://quarkus.io/guides/logging.", []),
    new TraitMeta("master", false, "Kubernetes, Knative, OpenShift", "The Master trait allows to configure the integration to automatically leverage Kubernetes resources for doing leader election and starting *master* routes only on certain instances. It's activated automatically when using the master endpoint in a route, e.g. `from(\"master:lockname:telegram:bots\")...`. NOTE: this trait adds special permissions to the integration service account in order to read/write configmaps and read pods. It's recommended to use a different service account than \"default\" when running the integration.", []),
    new TraitMeta("mount", false, "Kubernetes, Knative, OpenShift", "The Mount trait can be used to configure volumes mounted on the Integration Pods.", []),
    new TraitMeta("openapi", false, "Kubernetes, Knative, OpenShift", "The OpenAPI DSL trait is internally used to allow creating integrations from a OpenAPI specs.", []),
    new TraitMeta("owner", false, "Kubernetes, Knative, OpenShift", "The Owner trait ensures that all created resources belong to the integration being created and transfers annotations and labels on the integration onto these owned resources.", []),
    new TraitMeta("pdb", false, "Kubernetes, Knative, OpenShift", "The PDB trait allows to configure the PodDisruptionBudget resource for the Integration pods.", []),
    new TraitMeta("platform", false, "Kubernetes, Knative, OpenShift", "The platform trait is a base trait that is used to assign an integration platform to an integration. In case the platform is missing, the trait is allowed to create a default platform. This feature is especially useful in contexts where there's no need to provide a custom configuration for the platform (e.g. on OpenShift the default settings work, since there's an embedded container image registry).", []),
    new TraitMeta("pod", false, "Kubernetes, Knative, OpenShift", "The pod trait allows the customization of the Integration pods. It applies the `PodSpecTemplate` struct contained in the Integration `.spec.podTemplate` field, into the Integration deployment Pods template, using strategic merge patch. This can be used to customize the container where Camel routes execute, by using the `integration` container name.", []),
    new TraitMeta("prometheus", false, "Kubernetes, Knative, OpenShift", "The Prometheus trait configures a Prometheus-compatible endpoint. It also creates a `PodMonitor` resource, so that the endpoint can be scraped automatically, when using the Prometheus operator. The metrics are exposed using MicroProfile Metrics. WARNING: The creation of the `PodMonitor` resource requires the https://github.com/coreos/prometheus-operator[Prometheus Operator] custom resource definition to be installed. You can set `pod-monitor` to `false` for the Prometheus trait to work without the Prometheus Operator. The Prometheus trait is disabled by default.", []),
    new TraitMeta("pull-secret", false, "Kubernetes, Knative, OpenShift", "The Pull Secret trait sets a pull secret on the pod, to allow Kubernetes to retrieve the container image from an external registry. The pull secret can be specified manually or, in case you've configured authentication for an external container registry on the `IntegrationPlatform`, the same secret is used to pull images. It's enabled by default whenever you configure authentication for an external container registry, so it assumes that external registries are private. If your registry does not need authentication for pulling images, you can disable this trait.", []),
    new TraitMeta("quarkus", false, "Kubernetes, Knative, OpenShift", "The Quarkus trait configures the Quarkus runtime. It's enabled by default. NOTE: Compiling to a native executable, i.e. when using `package-type=native`, is only supported for kamelets, as well as YAML and XML integrations. It also requires at least 4GiB of memory, so the Pod running the native build, that is either the operator Pod, or the build Pod (depending on the build strategy configured for the platform), must have enough memory available.", []),
    new TraitMeta("route", false, "OpenShift", "The Route trait can be used to configure the creation of OpenShift routes for the integration. The certificate and key contents may be sourced either from the local filesystem or in a Openshift `secret` object. The user may use the parameters ending in `-secret` (example: `tls-certificate-secret`) to reference a certificate stored in a `secret`. Parameters ending in `-secret` have higher priorities and in case the same route parameter is set, for example: `tls-key-secret` and `tls-key`, then `tls-key-secret` is used. The recommended approach to set the key and certificates is to use `secrets` to store their contents and use the following parameters to reference them: `tls-certificate-secret`, `tls-key-secret`, `tls-ca-certificate-secret`, `tls-destination-ca-certificate-secret` See the examples section at the end of this page to see the setup options.", []),
    new TraitMeta("service-binding", false, "Kubernetes, Knative, OpenShift", "The Service Binding trait allows users to connect to Services in Kubernetes: https://github.com/k8s-service-bindings/spec#service-binding As the specification is still evolving this is subject to change", []),
    new TraitMeta("service", false, "Kubernetes, OpenShift", "The Service trait exposes the integration with a Service resource so that it can be accessed by other applications (or integrations) in the same namespace. It's enabled by default if the integration depends on a Camel component that can expose a HTTP endpoint.", []),
    new TraitMeta("3scale", false, "Kubernetes, Knative, OpenShift", "The 3scale trait can be used to automatically create annotations that allow 3scale to discover the generated service and make it available for API management. The 3scale trait is disabled by default.", []),
    new TraitMeta("toleration", false, "Kubernetes, Knative, OpenShift", "This trait sets Tolerations over Integration pods. Tolerations allow (but do not require) the pods to schedule onto nodes with matching taints. See https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/ for more details. The toleration should be expressed in a similar manner that of taints, i.e., `Key[=Value]:Effect[:Seconds]`, where values in square brackets are optional. For examples: - `node-role.kubernetes.io/master:NoSchedule` - `node.kubernetes.io/network-unavailable:NoExecute:3000` - `disktype=ssd:PreferNoSchedule` It's disabled by default.", []),
    new TraitMeta("tracing", false, "Kubernetes, Knative, OpenShift", "The Tracing trait can be used to automatically publish tracing information to an OpenTracing compatible collector. The trait is able to automatically discover the tracing endpoint available in the namespace (supports **Jaeger**). The Tracing trait is disabled by default.", []),
];
